name: release

on:
  push:
    tags:
    - '*'

jobs:
  release-window-x86_64:
    name: Build for Windows x86_64
    runs-on: windows-latest
    steps:

      # Checkout the project
      - uses: actions/checkout@v4

      # Install mingw64
      - uses: msys2/setup-msys2@v2
      - run: echo C:\msys64\usr\bin >> $env:GITHUB_PATH
      - run: echo C:\msys64\mingw64\bin >> $env:GITHUB_PATH
      - run: Get-Command pacman
      - run: pacman -S --needed --noconfirm mingw-w64-x86_64-gcc
      - run: Get-Command gcc

      # Set up local root directory for installing tools into
      - run: echo ${{ github.workspace }}\.local\bin >> $env:GITHUB_PATH
      - run: mkdir .local

      # Install Dune
      - run: echo DUNE_NAME=dune-3.20.1-x86_64-windows >> $env:GITHUB_ENV
      - run: curl --output "$env:DUNE_NAME.tar.gz" "https://s3.g.s4.mega.io/ycsnsngpe2elgjdd2uzbdpyj6s54q5itlvy6g/alice/dune/$env:DUNE_NAME.tar.gz"
      - run: tar xf "$env:DUNE_NAME.tar.gz"
      - run: Copy-Item -Recurse -Force "$env:DUNE_NAME/*" .local
      - run: Remove-Item -Recurse -Force "$env:DUNE_NAME"
      - run: Remove-Item -Recurse -Force "$env:DUNE_NAME.tar.gz"

      # Install Alice (used to bootstrap environment)
      - run: echo "$HOME\.alice\current\bin" >> $env:GITHUB_PATH
      - run: echo ALICE_IN_NAME=alice-0.0.0-x86_64-windows >> $env:GITHUB_ENV
      - run: curl --output "$env:ALICE_IN_NAME.tar.gz" "https://s3.g.s4.mega.io/ycsnsngpe2elgjdd2uzbdpyj6s54q5itlvy6g/alice/alice/$env:ALICE_IN_NAME.tar.gz"
      - run: tar xf "$env:ALICE_IN_NAME.tar.gz"
      - run: Copy-Item -Recurse -Force "$env:ALICE_IN_NAME/*" .local
      - run: Remove-Item -Recurse -Force "$env:ALICE_IN_NAME"
      - run: Remove-Item -Recurse -Force "$env:ALICE_IN_NAME.tar.gz"

      # Make sure that Dune and Alice both work
      - run: Get-Command dune
      - run: dune --version
      - run: Get-Command alice
      - run: alice --help

      # Use Alice to bootstrap OCaml environment
      - run: alice tools get
      - run: Get-Command ocamlopt.opt

      # Build the project
      - run: echo DUNE_CONFIG__PKG_BUILD_PROGRESS=enabled >> $env:GITHUB_ENV
      - run: dune build

      # Release a tarball
      - run: echo ALICE_OUT_NAME=alice-${{ github.ref_name }}-x86_64-windows >> $env:GITHUB_ENV
      - run: mkdir "$env:ALICE_OUT_NAME"
      - run: Copy-Item -Recurse -Force _build/install/default/* "$env:ALICE_OUT_NAME"
      - run: tar czf "$env:ALICE_OUT_NAME.tar.gz" "$env:ALICE_OUT_NAME"
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "*.tar.gz"

  release-unix:
    name: Build for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            name: x86_64-macos
          - os: macos-14
            name: aarch64-macos
          - os: ubuntu-latest
            name: x86_64-linux-gnu
    steps:
      # Checkout the project
      - uses: actions/checkout@v4

      - if: matrix.os == 'macos-13'
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: coreutils

      - if: matrix.os == 'macos-14'
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: coreutils

      # Set up local root directory for installing tools into
      - run: echo $HOME/.local/bin >> $GITHUB_PATH

      # Install Dune
      - run: curl -fsSL https://github.com/ocaml-dune/dune-bin-install/releases/download/v2/install.sh | sh -s 3.20.1 --install-root $HOME/.local --no-update-shell-config
      - run: which dune
      - run: dune --version

      # Install OCaml
      - run: echo $HOME/.alice/current/bin >> $GITHUB_PATH
      - run: boot/${{ matrix.name }}.sh
      - run: which ocamlopt.opt

      # Build the project
      - run: echo DUNE_CONFIG__PKG_BUILD_PROGRESS=enabled >> $GITHUB_ENV
      - run: dune build

      # Release a tarball
      - run: echo ALICE_OUT_NAME=alice-${{ github.ref_name }}-${{ matrix.name }} >> $GITHUB_ENV
      - run: mkdir "$ALICE_OUT_NAME"
      - run: cp -rlf _build/install/default/* "$ALICE_OUT_NAME"
      - if: matrix.os == 'ubuntu-latest'
        run: strip "$ALICE_OUT_NAME"/bin/alice
      - run: tar czf "$ALICE_OUT_NAME.tar.gz" "$ALICE_OUT_NAME"
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "*.tar.gz"

  release-linux-musl-static:
    name: Build for x86_64-linux-musl-static
    runs-on: ubuntu-latest
    steps:
      # Checkout the project
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - run: docker buildx build --output type=local,dest=./out -f scripts/build-alice-linux-musl.dockerfile .
